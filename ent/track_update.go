// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/m-nny/universe/ent/predicate"
	"github.com/m-nny/universe/ent/track"
	"github.com/m-nny/universe/ent/user"
)

// TrackUpdate is the builder for updating Track entities.
type TrackUpdate struct {
	config
	hooks    []Hook
	mutation *TrackMutation
}

// Where appends a list predicates to the TrackUpdate builder.
func (tu *TrackUpdate) Where(ps ...predicate.Track) *TrackUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TrackUpdate) SetName(s string) *TrackUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableName(s *string) *TrackUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetArtistNames sets the "artistNames" field.
func (tu *TrackUpdate) SetArtistNames(s []string) *TrackUpdate {
	tu.mutation.SetArtistNames(s)
	return tu
}

// AppendArtistNames appends s to the "artistNames" field.
func (tu *TrackUpdate) AppendArtistNames(s []string) *TrackUpdate {
	tu.mutation.AppendArtistNames(s)
	return tu
}

// SetArtistIds sets the "artistIds" field.
func (tu *TrackUpdate) SetArtistIds(s []string) *TrackUpdate {
	tu.mutation.SetArtistIds(s)
	return tu
}

// AppendArtistIds appends s to the "artistIds" field.
func (tu *TrackUpdate) AppendArtistIds(s []string) *TrackUpdate {
	tu.mutation.AppendArtistIds(s)
	return tu
}

// AddSavedByIDs adds the "savedBy" edge to the User entity by IDs.
func (tu *TrackUpdate) AddSavedByIDs(ids ...string) *TrackUpdate {
	tu.mutation.AddSavedByIDs(ids...)
	return tu
}

// AddSavedBy adds the "savedBy" edges to the User entity.
func (tu *TrackUpdate) AddSavedBy(u ...*User) *TrackUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddSavedByIDs(ids...)
}

// Mutation returns the TrackMutation object of the builder.
func (tu *TrackUpdate) Mutation() *TrackMutation {
	return tu.mutation
}

// ClearSavedBy clears all "savedBy" edges to the User entity.
func (tu *TrackUpdate) ClearSavedBy() *TrackUpdate {
	tu.mutation.ClearSavedBy()
	return tu
}

// RemoveSavedByIDs removes the "savedBy" edge to User entities by IDs.
func (tu *TrackUpdate) RemoveSavedByIDs(ids ...string) *TrackUpdate {
	tu.mutation.RemoveSavedByIDs(ids...)
	return tu
}

// RemoveSavedBy removes "savedBy" edges to User entities.
func (tu *TrackUpdate) RemoveSavedBy(u ...*User) *TrackUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveSavedByIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrackUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrackUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrackUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TrackUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := track.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Track.name": %w`, err)}
		}
	}
	return nil
}

func (tu *TrackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.ArtistNames(); ok {
		_spec.SetField(track.FieldArtistNames, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedArtistNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtistNames, value)
		})
	}
	if value, ok := tu.mutation.ArtistIds(); ok {
		_spec.SetField(track.FieldArtistIds, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedArtistIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtistIds, value)
		})
	}
	if tu.mutation.SavedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSavedByIDs(); len(nodes) > 0 && !tu.mutation.SavedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SavedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrackUpdateOne is the builder for updating a single Track entity.
type TrackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrackMutation
}

// SetName sets the "name" field.
func (tuo *TrackUpdateOne) SetName(s string) *TrackUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableName(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetArtistNames sets the "artistNames" field.
func (tuo *TrackUpdateOne) SetArtistNames(s []string) *TrackUpdateOne {
	tuo.mutation.SetArtistNames(s)
	return tuo
}

// AppendArtistNames appends s to the "artistNames" field.
func (tuo *TrackUpdateOne) AppendArtistNames(s []string) *TrackUpdateOne {
	tuo.mutation.AppendArtistNames(s)
	return tuo
}

// SetArtistIds sets the "artistIds" field.
func (tuo *TrackUpdateOne) SetArtistIds(s []string) *TrackUpdateOne {
	tuo.mutation.SetArtistIds(s)
	return tuo
}

// AppendArtistIds appends s to the "artistIds" field.
func (tuo *TrackUpdateOne) AppendArtistIds(s []string) *TrackUpdateOne {
	tuo.mutation.AppendArtistIds(s)
	return tuo
}

// AddSavedByIDs adds the "savedBy" edge to the User entity by IDs.
func (tuo *TrackUpdateOne) AddSavedByIDs(ids ...string) *TrackUpdateOne {
	tuo.mutation.AddSavedByIDs(ids...)
	return tuo
}

// AddSavedBy adds the "savedBy" edges to the User entity.
func (tuo *TrackUpdateOne) AddSavedBy(u ...*User) *TrackUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddSavedByIDs(ids...)
}

// Mutation returns the TrackMutation object of the builder.
func (tuo *TrackUpdateOne) Mutation() *TrackMutation {
	return tuo.mutation
}

// ClearSavedBy clears all "savedBy" edges to the User entity.
func (tuo *TrackUpdateOne) ClearSavedBy() *TrackUpdateOne {
	tuo.mutation.ClearSavedBy()
	return tuo
}

// RemoveSavedByIDs removes the "savedBy" edge to User entities by IDs.
func (tuo *TrackUpdateOne) RemoveSavedByIDs(ids ...string) *TrackUpdateOne {
	tuo.mutation.RemoveSavedByIDs(ids...)
	return tuo
}

// RemoveSavedBy removes "savedBy" edges to User entities.
func (tuo *TrackUpdateOne) RemoveSavedBy(u ...*User) *TrackUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveSavedByIDs(ids...)
}

// Where appends a list predicates to the TrackUpdate builder.
func (tuo *TrackUpdateOne) Where(ps ...predicate.Track) *TrackUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrackUpdateOne) Select(field string, fields ...string) *TrackUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Track entity.
func (tuo *TrackUpdateOne) Save(ctx context.Context) (*Track, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrackUpdateOne) SaveX(ctx context.Context) *Track {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrackUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrackUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TrackUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := track.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Track.name": %w`, err)}
		}
	}
	return nil
}

func (tuo *TrackUpdateOne) sqlSave(ctx context.Context) (_node *Track, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Track.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, track.FieldID)
		for _, f := range fields {
			if !track.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != track.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ArtistNames(); ok {
		_spec.SetField(track.FieldArtistNames, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedArtistNames(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtistNames, value)
		})
	}
	if value, ok := tuo.mutation.ArtistIds(); ok {
		_spec.SetField(track.FieldArtistIds, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedArtistIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtistIds, value)
		})
	}
	if tuo.mutation.SavedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSavedByIDs(); len(nodes) > 0 && !tuo.mutation.SavedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SavedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Track{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
