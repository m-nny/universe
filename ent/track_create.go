// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-nny/universe/ent/album"
	"github.com/m-nny/universe/ent/artist"
	"github.com/m-nny/universe/ent/track"
	"github.com/m-nny/universe/ent/user"
)

// TrackCreate is the builder for creating a Track entity.
type TrackCreate struct {
	config
	mutation *TrackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSpotifyIds sets the "spotifyIds" field.
func (tc *TrackCreate) SetSpotifyIds(s []string) *TrackCreate {
	tc.mutation.SetSpotifyIds(s)
	return tc
}

// SetName sets the "name" field.
func (tc *TrackCreate) SetName(s string) *TrackCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetTrackNumber sets the "trackNumber" field.
func (tc *TrackCreate) SetTrackNumber(i int) *TrackCreate {
	tc.mutation.SetTrackNumber(i)
	return tc
}

// SetSimplifiedName sets the "simplifiedName" field.
func (tc *TrackCreate) SetSimplifiedName(s string) *TrackCreate {
	tc.mutation.SetSimplifiedName(s)
	return tc
}

// AddSavedByIDs adds the "savedBy" edge to the User entity by IDs.
func (tc *TrackCreate) AddSavedByIDs(ids ...string) *TrackCreate {
	tc.mutation.AddSavedByIDs(ids...)
	return tc
}

// AddSavedBy adds the "savedBy" edges to the User entity.
func (tc *TrackCreate) AddSavedBy(u ...*User) *TrackCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddSavedByIDs(ids...)
}

// SetAlbumID sets the "album" edge to the Album entity by ID.
func (tc *TrackCreate) SetAlbumID(id int) *TrackCreate {
	tc.mutation.SetAlbumID(id)
	return tc
}

// SetNillableAlbumID sets the "album" edge to the Album entity by ID if the given value is not nil.
func (tc *TrackCreate) SetNillableAlbumID(id *int) *TrackCreate {
	if id != nil {
		tc = tc.SetAlbumID(*id)
	}
	return tc
}

// SetAlbum sets the "album" edge to the Album entity.
func (tc *TrackCreate) SetAlbum(a *Album) *TrackCreate {
	return tc.SetAlbumID(a.ID)
}

// AddArtistIDs adds the "artists" edge to the Artist entity by IDs.
func (tc *TrackCreate) AddArtistIDs(ids ...int) *TrackCreate {
	tc.mutation.AddArtistIDs(ids...)
	return tc
}

// AddArtists adds the "artists" edges to the Artist entity.
func (tc *TrackCreate) AddArtists(a ...*Artist) *TrackCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddArtistIDs(ids...)
}

// Mutation returns the TrackMutation object of the builder.
func (tc *TrackCreate) Mutation() *TrackMutation {
	return tc.mutation
}

// Save creates the Track in the database.
func (tc *TrackCreate) Save(ctx context.Context) (*Track, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrackCreate) SaveX(ctx context.Context) *Track {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrackCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrackCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrackCreate) check() error {
	if _, ok := tc.mutation.SpotifyIds(); !ok {
		return &ValidationError{Name: "spotifyIds", err: errors.New(`ent: missing required field "Track.spotifyIds"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Track.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := track.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Track.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TrackNumber(); !ok {
		return &ValidationError{Name: "trackNumber", err: errors.New(`ent: missing required field "Track.trackNumber"`)}
	}
	if v, ok := tc.mutation.TrackNumber(); ok {
		if err := track.TrackNumberValidator(v); err != nil {
			return &ValidationError{Name: "trackNumber", err: fmt.Errorf(`ent: validator failed for field "Track.trackNumber": %w`, err)}
		}
	}
	if _, ok := tc.mutation.SimplifiedName(); !ok {
		return &ValidationError{Name: "simplifiedName", err: errors.New(`ent: missing required field "Track.simplifiedName"`)}
	}
	if v, ok := tc.mutation.SimplifiedName(); ok {
		if err := track.SimplifiedNameValidator(v); err != nil {
			return &ValidationError{Name: "simplifiedName", err: fmt.Errorf(`ent: validator failed for field "Track.simplifiedName": %w`, err)}
		}
	}
	return nil
}

func (tc *TrackCreate) sqlSave(ctx context.Context) (*Track, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrackCreate) createSpec() (*Track, *sqlgraph.CreateSpec) {
	var (
		_node = &Track{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(track.Table, sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.SpotifyIds(); ok {
		_spec.SetField(track.FieldSpotifyIds, field.TypeJSON, value)
		_node.SpotifyIds = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.TrackNumber(); ok {
		_spec.SetField(track.FieldTrackNumber, field.TypeInt, value)
		_node.TrackNumber = value
	}
	if value, ok := tc.mutation.SimplifiedName(); ok {
		_spec.SetField(track.FieldSimplifiedName, field.TypeString, value)
		_node.SimplifiedName = value
	}
	if nodes := tc.mutation.SavedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.SavedByTable,
			Columns: track.SavedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.AlbumTable,
			Columns: []string{track.AlbumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.album_tracks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.ArtistsTable,
			Columns: track.ArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Track.Create().
//		SetSpotifyIds(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrackUpsert) {
//			SetSpotifyIds(v+v).
//		}).
//		Exec(ctx)
func (tc *TrackCreate) OnConflict(opts ...sql.ConflictOption) *TrackUpsertOne {
	tc.conflict = opts
	return &TrackUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TrackCreate) OnConflictColumns(columns ...string) *TrackUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TrackUpsertOne{
		create: tc,
	}
}

type (
	// TrackUpsertOne is the builder for "upsert"-ing
	//  one Track node.
	TrackUpsertOne struct {
		create *TrackCreate
	}

	// TrackUpsert is the "OnConflict" setter.
	TrackUpsert struct {
		*sql.UpdateSet
	}
)

// SetSpotifyIds sets the "spotifyIds" field.
func (u *TrackUpsert) SetSpotifyIds(v []string) *TrackUpsert {
	u.Set(track.FieldSpotifyIds, v)
	return u
}

// UpdateSpotifyIds sets the "spotifyIds" field to the value that was provided on create.
func (u *TrackUpsert) UpdateSpotifyIds() *TrackUpsert {
	u.SetExcluded(track.FieldSpotifyIds)
	return u
}

// SetName sets the "name" field.
func (u *TrackUpsert) SetName(v string) *TrackUpsert {
	u.Set(track.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrackUpsert) UpdateName() *TrackUpsert {
	u.SetExcluded(track.FieldName)
	return u
}

// SetTrackNumber sets the "trackNumber" field.
func (u *TrackUpsert) SetTrackNumber(v int) *TrackUpsert {
	u.Set(track.FieldTrackNumber, v)
	return u
}

// UpdateTrackNumber sets the "trackNumber" field to the value that was provided on create.
func (u *TrackUpsert) UpdateTrackNumber() *TrackUpsert {
	u.SetExcluded(track.FieldTrackNumber)
	return u
}

// AddTrackNumber adds v to the "trackNumber" field.
func (u *TrackUpsert) AddTrackNumber(v int) *TrackUpsert {
	u.Add(track.FieldTrackNumber, v)
	return u
}

// SetSimplifiedName sets the "simplifiedName" field.
func (u *TrackUpsert) SetSimplifiedName(v string) *TrackUpsert {
	u.Set(track.FieldSimplifiedName, v)
	return u
}

// UpdateSimplifiedName sets the "simplifiedName" field to the value that was provided on create.
func (u *TrackUpsert) UpdateSimplifiedName() *TrackUpsert {
	u.SetExcluded(track.FieldSimplifiedName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrackUpsertOne) UpdateNewValues() *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Track.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrackUpsertOne) Ignore() *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrackUpsertOne) DoNothing() *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrackCreate.OnConflict
// documentation for more info.
func (u *TrackUpsertOne) Update(set func(*TrackUpsert)) *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrackUpsert{UpdateSet: update})
	}))
	return u
}

// SetSpotifyIds sets the "spotifyIds" field.
func (u *TrackUpsertOne) SetSpotifyIds(v []string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetSpotifyIds(v)
	})
}

// UpdateSpotifyIds sets the "spotifyIds" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateSpotifyIds() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateSpotifyIds()
	})
}

// SetName sets the "name" field.
func (u *TrackUpsertOne) SetName(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateName() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateName()
	})
}

// SetTrackNumber sets the "trackNumber" field.
func (u *TrackUpsertOne) SetTrackNumber(v int) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetTrackNumber(v)
	})
}

// AddTrackNumber adds v to the "trackNumber" field.
func (u *TrackUpsertOne) AddTrackNumber(v int) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.AddTrackNumber(v)
	})
}

// UpdateTrackNumber sets the "trackNumber" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateTrackNumber() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateTrackNumber()
	})
}

// SetSimplifiedName sets the "simplifiedName" field.
func (u *TrackUpsertOne) SetSimplifiedName(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetSimplifiedName(v)
	})
}

// UpdateSimplifiedName sets the "simplifiedName" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateSimplifiedName() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateSimplifiedName()
	})
}

// Exec executes the query.
func (u *TrackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrackUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrackUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrackCreateBulk is the builder for creating many Track entities in bulk.
type TrackCreateBulk struct {
	config
	err      error
	builders []*TrackCreate
	conflict []sql.ConflictOption
}

// Save creates the Track entities in the database.
func (tcb *TrackCreateBulk) Save(ctx context.Context) ([]*Track, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Track, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrackCreateBulk) SaveX(ctx context.Context) []*Track {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrackCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrackCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Track.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrackUpsert) {
//			SetSpotifyIds(v+v).
//		}).
//		Exec(ctx)
func (tcb *TrackCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrackUpsertBulk {
	tcb.conflict = opts
	return &TrackUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TrackCreateBulk) OnConflictColumns(columns ...string) *TrackUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TrackUpsertBulk{
		create: tcb,
	}
}

// TrackUpsertBulk is the builder for "upsert"-ing
// a bulk of Track nodes.
type TrackUpsertBulk struct {
	create *TrackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrackUpsertBulk) UpdateNewValues() *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrackUpsertBulk) Ignore() *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrackUpsertBulk) DoNothing() *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrackCreateBulk.OnConflict
// documentation for more info.
func (u *TrackUpsertBulk) Update(set func(*TrackUpsert)) *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrackUpsert{UpdateSet: update})
	}))
	return u
}

// SetSpotifyIds sets the "spotifyIds" field.
func (u *TrackUpsertBulk) SetSpotifyIds(v []string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetSpotifyIds(v)
	})
}

// UpdateSpotifyIds sets the "spotifyIds" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateSpotifyIds() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateSpotifyIds()
	})
}

// SetName sets the "name" field.
func (u *TrackUpsertBulk) SetName(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateName() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateName()
	})
}

// SetTrackNumber sets the "trackNumber" field.
func (u *TrackUpsertBulk) SetTrackNumber(v int) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetTrackNumber(v)
	})
}

// AddTrackNumber adds v to the "trackNumber" field.
func (u *TrackUpsertBulk) AddTrackNumber(v int) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.AddTrackNumber(v)
	})
}

// UpdateTrackNumber sets the "trackNumber" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateTrackNumber() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateTrackNumber()
	})
}

// SetSimplifiedName sets the "simplifiedName" field.
func (u *TrackUpsertBulk) SetSimplifiedName(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetSimplifiedName(v)
	})
}

// UpdateSimplifiedName sets the "simplifiedName" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateSimplifiedName() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateSimplifiedName()
	})
}

// Exec executes the query.
func (u *TrackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
