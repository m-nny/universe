// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/m-nny/universe/ent/track"
)

// Track is the model entity for the Track schema.
type Track struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ArtistNames holds the value of the "artistNames" field.
	ArtistNames []string `json:"artistNames,omitempty"`
	// ArtistIds holds the value of the "artistIds" field.
	ArtistIds []string `json:"artistIds,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackQuery when eager-loading is set.
	Edges        TrackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrackEdges holds the relations/edges for other nodes in the graph.
type TrackEdges struct {
	// SavedBy holds the value of the savedBy edge.
	SavedBy []*User `json:"savedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SavedByOrErr returns the SavedBy value or an error if the edge
// was not loaded in eager-loading.
func (e TrackEdges) SavedByOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.SavedBy, nil
	}
	return nil, &NotLoadedError{edge: "savedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Track) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case track.FieldArtistNames, track.FieldArtistIds:
			values[i] = new([]byte)
		case track.FieldID, track.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Track fields.
func (t *Track) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case track.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case track.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case track.FieldArtistNames:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field artistNames", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ArtistNames); err != nil {
					return fmt.Errorf("unmarshal field artistNames: %w", err)
				}
			}
		case track.FieldArtistIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field artistIds", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ArtistIds); err != nil {
					return fmt.Errorf("unmarshal field artistIds: %w", err)
				}
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Track.
// This includes values selected through modifiers, order, etc.
func (t *Track) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QuerySavedBy queries the "savedBy" edge of the Track entity.
func (t *Track) QuerySavedBy() *UserQuery {
	return NewTrackClient(t.config).QuerySavedBy(t)
}

// Update returns a builder for updating this Track.
// Note that you need to call Track.Unwrap() before calling this method if this Track
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Track) Update() *TrackUpdateOne {
	return NewTrackClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Track entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Track) Unwrap() *Track {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Track is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Track) String() string {
	var builder strings.Builder
	builder.WriteString("Track(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("artistNames=")
	builder.WriteString(fmt.Sprintf("%v", t.ArtistNames))
	builder.WriteString(", ")
	builder.WriteString("artistIds=")
	builder.WriteString(fmt.Sprintf("%v", t.ArtistIds))
	builder.WriteByte(')')
	return builder.String()
}

// Tracks is a parsable slice of Track.
type Tracks []*Track
