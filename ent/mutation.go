// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/m-nny/universe/ent/album"
	"github.com/m-nny/universe/ent/artist"
	"github.com/m-nny/universe/ent/predicate"
	"github.com/m-nny/universe/ent/track"
	"github.com/m-nny/universe/ent/user"
	"golang.org/x/oauth2"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlbum  = "Album"
	TypeArtist = "Artist"
	TypeTrack  = "Track"
	TypeUser   = "User"
)

// AlbumMutation represents an operation that mutates the Album nodes in the graph.
type AlbumMutation struct {
	config
	op               Op
	typ              string
	id               *int
	spotifyIds       *[]string
	appendspotifyIds []string
	discogsMasterId  *string
	name             *string
	simplifiedName   *string
	clearedFields    map[string]struct{}
	tracks           map[int]struct{}
	removedtracks    map[int]struct{}
	clearedtracks    bool
	artists          map[int]struct{}
	removedartists   map[int]struct{}
	clearedartists   bool
	done             bool
	oldValue         func(context.Context) (*Album, error)
	predicates       []predicate.Album
}

var _ ent.Mutation = (*AlbumMutation)(nil)

// albumOption allows management of the mutation configuration using functional options.
type albumOption func(*AlbumMutation)

// newAlbumMutation creates new mutation for the Album entity.
func newAlbumMutation(c config, op Op, opts ...albumOption) *AlbumMutation {
	m := &AlbumMutation{
		config:        c,
		op:            op,
		typ:           TypeAlbum,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlbumID sets the ID field of the mutation.
func withAlbumID(id int) albumOption {
	return func(m *AlbumMutation) {
		var (
			err   error
			once  sync.Once
			value *Album
		)
		m.oldValue = func(ctx context.Context) (*Album, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Album.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlbum sets the old Album of the mutation.
func withAlbum(node *Album) albumOption {
	return func(m *AlbumMutation) {
		m.oldValue = func(context.Context) (*Album, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlbumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlbumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlbumMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlbumMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Album.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSpotifyIds sets the "spotifyIds" field.
func (m *AlbumMutation) SetSpotifyIds(s []string) {
	m.spotifyIds = &s
	m.appendspotifyIds = nil
}

// SpotifyIds returns the value of the "spotifyIds" field in the mutation.
func (m *AlbumMutation) SpotifyIds() (r []string, exists bool) {
	v := m.spotifyIds
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyIds returns the old "spotifyIds" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldSpotifyIds(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyIds: %w", err)
	}
	return oldValue.SpotifyIds, nil
}

// AppendSpotifyIds adds s to the "spotifyIds" field.
func (m *AlbumMutation) AppendSpotifyIds(s []string) {
	m.appendspotifyIds = append(m.appendspotifyIds, s...)
}

// AppendedSpotifyIds returns the list of values that were appended to the "spotifyIds" field in this mutation.
func (m *AlbumMutation) AppendedSpotifyIds() ([]string, bool) {
	if len(m.appendspotifyIds) == 0 {
		return nil, false
	}
	return m.appendspotifyIds, true
}

// ResetSpotifyIds resets all changes to the "spotifyIds" field.
func (m *AlbumMutation) ResetSpotifyIds() {
	m.spotifyIds = nil
	m.appendspotifyIds = nil
}

// SetDiscogsMasterId sets the "discogsMasterId" field.
func (m *AlbumMutation) SetDiscogsMasterId(s string) {
	m.discogsMasterId = &s
}

// DiscogsMasterId returns the value of the "discogsMasterId" field in the mutation.
func (m *AlbumMutation) DiscogsMasterId() (r string, exists bool) {
	v := m.discogsMasterId
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscogsMasterId returns the old "discogsMasterId" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldDiscogsMasterId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscogsMasterId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscogsMasterId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscogsMasterId: %w", err)
	}
	return oldValue.DiscogsMasterId, nil
}

// ResetDiscogsMasterId resets all changes to the "discogsMasterId" field.
func (m *AlbumMutation) ResetDiscogsMasterId() {
	m.discogsMasterId = nil
}

// SetName sets the "name" field.
func (m *AlbumMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AlbumMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AlbumMutation) ResetName() {
	m.name = nil
}

// SetSimplifiedName sets the "simplifiedName" field.
func (m *AlbumMutation) SetSimplifiedName(s string) {
	m.simplifiedName = &s
}

// SimplifiedName returns the value of the "simplifiedName" field in the mutation.
func (m *AlbumMutation) SimplifiedName() (r string, exists bool) {
	v := m.simplifiedName
	if v == nil {
		return
	}
	return *v, true
}

// OldSimplifiedName returns the old "simplifiedName" field's value of the Album entity.
// If the Album object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlbumMutation) OldSimplifiedName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimplifiedName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimplifiedName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimplifiedName: %w", err)
	}
	return oldValue.SimplifiedName, nil
}

// ResetSimplifiedName resets all changes to the "simplifiedName" field.
func (m *AlbumMutation) ResetSimplifiedName() {
	m.simplifiedName = nil
}

// AddTrackIDs adds the "tracks" edge to the Track entity by ids.
func (m *AlbumMutation) AddTrackIDs(ids ...int) {
	if m.tracks == nil {
		m.tracks = make(map[int]struct{})
	}
	for i := range ids {
		m.tracks[ids[i]] = struct{}{}
	}
}

// ClearTracks clears the "tracks" edge to the Track entity.
func (m *AlbumMutation) ClearTracks() {
	m.clearedtracks = true
}

// TracksCleared reports if the "tracks" edge to the Track entity was cleared.
func (m *AlbumMutation) TracksCleared() bool {
	return m.clearedtracks
}

// RemoveTrackIDs removes the "tracks" edge to the Track entity by IDs.
func (m *AlbumMutation) RemoveTrackIDs(ids ...int) {
	if m.removedtracks == nil {
		m.removedtracks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tracks, ids[i])
		m.removedtracks[ids[i]] = struct{}{}
	}
}

// RemovedTracks returns the removed IDs of the "tracks" edge to the Track entity.
func (m *AlbumMutation) RemovedTracksIDs() (ids []int) {
	for id := range m.removedtracks {
		ids = append(ids, id)
	}
	return
}

// TracksIDs returns the "tracks" edge IDs in the mutation.
func (m *AlbumMutation) TracksIDs() (ids []int) {
	for id := range m.tracks {
		ids = append(ids, id)
	}
	return
}

// ResetTracks resets all changes to the "tracks" edge.
func (m *AlbumMutation) ResetTracks() {
	m.tracks = nil
	m.clearedtracks = false
	m.removedtracks = nil
}

// AddArtistIDs adds the "artists" edge to the Artist entity by ids.
func (m *AlbumMutation) AddArtistIDs(ids ...int) {
	if m.artists == nil {
		m.artists = make(map[int]struct{})
	}
	for i := range ids {
		m.artists[ids[i]] = struct{}{}
	}
}

// ClearArtists clears the "artists" edge to the Artist entity.
func (m *AlbumMutation) ClearArtists() {
	m.clearedartists = true
}

// ArtistsCleared reports if the "artists" edge to the Artist entity was cleared.
func (m *AlbumMutation) ArtistsCleared() bool {
	return m.clearedartists
}

// RemoveArtistIDs removes the "artists" edge to the Artist entity by IDs.
func (m *AlbumMutation) RemoveArtistIDs(ids ...int) {
	if m.removedartists == nil {
		m.removedartists = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.artists, ids[i])
		m.removedartists[ids[i]] = struct{}{}
	}
}

// RemovedArtists returns the removed IDs of the "artists" edge to the Artist entity.
func (m *AlbumMutation) RemovedArtistsIDs() (ids []int) {
	for id := range m.removedartists {
		ids = append(ids, id)
	}
	return
}

// ArtistsIDs returns the "artists" edge IDs in the mutation.
func (m *AlbumMutation) ArtistsIDs() (ids []int) {
	for id := range m.artists {
		ids = append(ids, id)
	}
	return
}

// ResetArtists resets all changes to the "artists" edge.
func (m *AlbumMutation) ResetArtists() {
	m.artists = nil
	m.clearedartists = false
	m.removedartists = nil
}

// Where appends a list predicates to the AlbumMutation builder.
func (m *AlbumMutation) Where(ps ...predicate.Album) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AlbumMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AlbumMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Album, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AlbumMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AlbumMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Album).
func (m *AlbumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlbumMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.spotifyIds != nil {
		fields = append(fields, album.FieldSpotifyIds)
	}
	if m.discogsMasterId != nil {
		fields = append(fields, album.FieldDiscogsMasterId)
	}
	if m.name != nil {
		fields = append(fields, album.FieldName)
	}
	if m.simplifiedName != nil {
		fields = append(fields, album.FieldSimplifiedName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlbumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case album.FieldSpotifyIds:
		return m.SpotifyIds()
	case album.FieldDiscogsMasterId:
		return m.DiscogsMasterId()
	case album.FieldName:
		return m.Name()
	case album.FieldSimplifiedName:
		return m.SimplifiedName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlbumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case album.FieldSpotifyIds:
		return m.OldSpotifyIds(ctx)
	case album.FieldDiscogsMasterId:
		return m.OldDiscogsMasterId(ctx)
	case album.FieldName:
		return m.OldName(ctx)
	case album.FieldSimplifiedName:
		return m.OldSimplifiedName(ctx)
	}
	return nil, fmt.Errorf("unknown Album field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case album.FieldSpotifyIds:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyIds(v)
		return nil
	case album.FieldDiscogsMasterId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscogsMasterId(v)
		return nil
	case album.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case album.FieldSimplifiedName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimplifiedName(v)
		return nil
	}
	return fmt.Errorf("unknown Album field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlbumMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlbumMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlbumMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Album numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlbumMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlbumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlbumMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Album nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlbumMutation) ResetField(name string) error {
	switch name {
	case album.FieldSpotifyIds:
		m.ResetSpotifyIds()
		return nil
	case album.FieldDiscogsMasterId:
		m.ResetDiscogsMasterId()
		return nil
	case album.FieldName:
		m.ResetName()
		return nil
	case album.FieldSimplifiedName:
		m.ResetSimplifiedName()
		return nil
	}
	return fmt.Errorf("unknown Album field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlbumMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tracks != nil {
		edges = append(edges, album.EdgeTracks)
	}
	if m.artists != nil {
		edges = append(edges, album.EdgeArtists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlbumMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case album.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.tracks))
		for id := range m.tracks {
			ids = append(ids, id)
		}
		return ids
	case album.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.artists))
		for id := range m.artists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlbumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtracks != nil {
		edges = append(edges, album.EdgeTracks)
	}
	if m.removedartists != nil {
		edges = append(edges, album.EdgeArtists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlbumMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case album.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.removedtracks))
		for id := range m.removedtracks {
			ids = append(ids, id)
		}
		return ids
	case album.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.removedartists))
		for id := range m.removedartists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlbumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtracks {
		edges = append(edges, album.EdgeTracks)
	}
	if m.clearedartists {
		edges = append(edges, album.EdgeArtists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlbumMutation) EdgeCleared(name string) bool {
	switch name {
	case album.EdgeTracks:
		return m.clearedtracks
	case album.EdgeArtists:
		return m.clearedartists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlbumMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Album unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlbumMutation) ResetEdge(name string) error {
	switch name {
	case album.EdgeTracks:
		m.ResetTracks()
		return nil
	case album.EdgeArtists:
		m.ResetArtists()
		return nil
	}
	return fmt.Errorf("unknown Album edge %s", name)
}

// ArtistMutation represents an operation that mutates the Artist nodes in the graph.
type ArtistMutation struct {
	config
	op            Op
	typ           string
	id            *int
	spotifyId     *string
	name          *string
	clearedFields map[string]struct{}
	tracks        map[int]struct{}
	removedtracks map[int]struct{}
	clearedtracks bool
	albums        map[int]struct{}
	removedalbums map[int]struct{}
	clearedalbums bool
	done          bool
	oldValue      func(context.Context) (*Artist, error)
	predicates    []predicate.Artist
}

var _ ent.Mutation = (*ArtistMutation)(nil)

// artistOption allows management of the mutation configuration using functional options.
type artistOption func(*ArtistMutation)

// newArtistMutation creates new mutation for the Artist entity.
func newArtistMutation(c config, op Op, opts ...artistOption) *ArtistMutation {
	m := &ArtistMutation{
		config:        c,
		op:            op,
		typ:           TypeArtist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArtistID sets the ID field of the mutation.
func withArtistID(id int) artistOption {
	return func(m *ArtistMutation) {
		var (
			err   error
			once  sync.Once
			value *Artist
		)
		m.oldValue = func(ctx context.Context) (*Artist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Artist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArtist sets the old Artist of the mutation.
func withArtist(node *Artist) artistOption {
	return func(m *ArtistMutation) {
		m.oldValue = func(context.Context) (*Artist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArtistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArtistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArtistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArtistMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Artist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSpotifyId sets the "spotifyId" field.
func (m *ArtistMutation) SetSpotifyId(s string) {
	m.spotifyId = &s
}

// SpotifyId returns the value of the "spotifyId" field in the mutation.
func (m *ArtistMutation) SpotifyId() (r string, exists bool) {
	v := m.spotifyId
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyId returns the old "spotifyId" field's value of the Artist entity.
// If the Artist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArtistMutation) OldSpotifyId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyId: %w", err)
	}
	return oldValue.SpotifyId, nil
}

// ResetSpotifyId resets all changes to the "spotifyId" field.
func (m *ArtistMutation) ResetSpotifyId() {
	m.spotifyId = nil
}

// SetName sets the "name" field.
func (m *ArtistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArtistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Artist entity.
// If the Artist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArtistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ArtistMutation) ResetName() {
	m.name = nil
}

// AddTrackIDs adds the "tracks" edge to the Track entity by ids.
func (m *ArtistMutation) AddTrackIDs(ids ...int) {
	if m.tracks == nil {
		m.tracks = make(map[int]struct{})
	}
	for i := range ids {
		m.tracks[ids[i]] = struct{}{}
	}
}

// ClearTracks clears the "tracks" edge to the Track entity.
func (m *ArtistMutation) ClearTracks() {
	m.clearedtracks = true
}

// TracksCleared reports if the "tracks" edge to the Track entity was cleared.
func (m *ArtistMutation) TracksCleared() bool {
	return m.clearedtracks
}

// RemoveTrackIDs removes the "tracks" edge to the Track entity by IDs.
func (m *ArtistMutation) RemoveTrackIDs(ids ...int) {
	if m.removedtracks == nil {
		m.removedtracks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tracks, ids[i])
		m.removedtracks[ids[i]] = struct{}{}
	}
}

// RemovedTracks returns the removed IDs of the "tracks" edge to the Track entity.
func (m *ArtistMutation) RemovedTracksIDs() (ids []int) {
	for id := range m.removedtracks {
		ids = append(ids, id)
	}
	return
}

// TracksIDs returns the "tracks" edge IDs in the mutation.
func (m *ArtistMutation) TracksIDs() (ids []int) {
	for id := range m.tracks {
		ids = append(ids, id)
	}
	return
}

// ResetTracks resets all changes to the "tracks" edge.
func (m *ArtistMutation) ResetTracks() {
	m.tracks = nil
	m.clearedtracks = false
	m.removedtracks = nil
}

// AddAlbumIDs adds the "albums" edge to the Album entity by ids.
func (m *ArtistMutation) AddAlbumIDs(ids ...int) {
	if m.albums == nil {
		m.albums = make(map[int]struct{})
	}
	for i := range ids {
		m.albums[ids[i]] = struct{}{}
	}
}

// ClearAlbums clears the "albums" edge to the Album entity.
func (m *ArtistMutation) ClearAlbums() {
	m.clearedalbums = true
}

// AlbumsCleared reports if the "albums" edge to the Album entity was cleared.
func (m *ArtistMutation) AlbumsCleared() bool {
	return m.clearedalbums
}

// RemoveAlbumIDs removes the "albums" edge to the Album entity by IDs.
func (m *ArtistMutation) RemoveAlbumIDs(ids ...int) {
	if m.removedalbums == nil {
		m.removedalbums = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.albums, ids[i])
		m.removedalbums[ids[i]] = struct{}{}
	}
}

// RemovedAlbums returns the removed IDs of the "albums" edge to the Album entity.
func (m *ArtistMutation) RemovedAlbumsIDs() (ids []int) {
	for id := range m.removedalbums {
		ids = append(ids, id)
	}
	return
}

// AlbumsIDs returns the "albums" edge IDs in the mutation.
func (m *ArtistMutation) AlbumsIDs() (ids []int) {
	for id := range m.albums {
		ids = append(ids, id)
	}
	return
}

// ResetAlbums resets all changes to the "albums" edge.
func (m *ArtistMutation) ResetAlbums() {
	m.albums = nil
	m.clearedalbums = false
	m.removedalbums = nil
}

// Where appends a list predicates to the ArtistMutation builder.
func (m *ArtistMutation) Where(ps ...predicate.Artist) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArtistMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArtistMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Artist, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArtistMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArtistMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Artist).
func (m *ArtistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArtistMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.spotifyId != nil {
		fields = append(fields, artist.FieldSpotifyId)
	}
	if m.name != nil {
		fields = append(fields, artist.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArtistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case artist.FieldSpotifyId:
		return m.SpotifyId()
	case artist.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArtistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case artist.FieldSpotifyId:
		return m.OldSpotifyId(ctx)
	case artist.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Artist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case artist.FieldSpotifyId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyId(v)
		return nil
	case artist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Artist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArtistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArtistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArtistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Artist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArtistMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArtistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArtistMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Artist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArtistMutation) ResetField(name string) error {
	switch name {
	case artist.FieldSpotifyId:
		m.ResetSpotifyId()
		return nil
	case artist.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Artist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArtistMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tracks != nil {
		edges = append(edges, artist.EdgeTracks)
	}
	if m.albums != nil {
		edges = append(edges, artist.EdgeAlbums)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArtistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case artist.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.tracks))
		for id := range m.tracks {
			ids = append(ids, id)
		}
		return ids
	case artist.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.albums))
		for id := range m.albums {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArtistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtracks != nil {
		edges = append(edges, artist.EdgeTracks)
	}
	if m.removedalbums != nil {
		edges = append(edges, artist.EdgeAlbums)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArtistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case artist.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.removedtracks))
		for id := range m.removedtracks {
			ids = append(ids, id)
		}
		return ids
	case artist.EdgeAlbums:
		ids := make([]ent.Value, 0, len(m.removedalbums))
		for id := range m.removedalbums {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArtistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtracks {
		edges = append(edges, artist.EdgeTracks)
	}
	if m.clearedalbums {
		edges = append(edges, artist.EdgeAlbums)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArtistMutation) EdgeCleared(name string) bool {
	switch name {
	case artist.EdgeTracks:
		return m.clearedtracks
	case artist.EdgeAlbums:
		return m.clearedalbums
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArtistMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Artist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArtistMutation) ResetEdge(name string) error {
	switch name {
	case artist.EdgeTracks:
		m.ResetTracks()
		return nil
	case artist.EdgeAlbums:
		m.ResetAlbums()
		return nil
	}
	return fmt.Errorf("unknown Artist edge %s", name)
}

// TrackMutation represents an operation that mutates the Track nodes in the graph.
type TrackMutation struct {
	config
	op               Op
	typ              string
	id               *int
	spotifyIds       *[]string
	appendspotifyIds []string
	name             *string
	trackNumber      *int
	addtrackNumber   *int
	simplifiedName   *string
	clearedFields    map[string]struct{}
	savedBy          map[string]struct{}
	removedsavedBy   map[string]struct{}
	clearedsavedBy   bool
	album            *int
	clearedalbum     bool
	artists          map[int]struct{}
	removedartists   map[int]struct{}
	clearedartists   bool
	done             bool
	oldValue         func(context.Context) (*Track, error)
	predicates       []predicate.Track
}

var _ ent.Mutation = (*TrackMutation)(nil)

// trackOption allows management of the mutation configuration using functional options.
type trackOption func(*TrackMutation)

// newTrackMutation creates new mutation for the Track entity.
func newTrackMutation(c config, op Op, opts ...trackOption) *TrackMutation {
	m := &TrackMutation{
		config:        c,
		op:            op,
		typ:           TypeTrack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrackID sets the ID field of the mutation.
func withTrackID(id int) trackOption {
	return func(m *TrackMutation) {
		var (
			err   error
			once  sync.Once
			value *Track
		)
		m.oldValue = func(ctx context.Context) (*Track, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Track.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrack sets the old Track of the mutation.
func withTrack(node *Track) trackOption {
	return func(m *TrackMutation) {
		m.oldValue = func(context.Context) (*Track, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrackMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Track.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSpotifyIds sets the "spotifyIds" field.
func (m *TrackMutation) SetSpotifyIds(s []string) {
	m.spotifyIds = &s
	m.appendspotifyIds = nil
}

// SpotifyIds returns the value of the "spotifyIds" field in the mutation.
func (m *TrackMutation) SpotifyIds() (r []string, exists bool) {
	v := m.spotifyIds
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyIds returns the old "spotifyIds" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldSpotifyIds(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyIds: %w", err)
	}
	return oldValue.SpotifyIds, nil
}

// AppendSpotifyIds adds s to the "spotifyIds" field.
func (m *TrackMutation) AppendSpotifyIds(s []string) {
	m.appendspotifyIds = append(m.appendspotifyIds, s...)
}

// AppendedSpotifyIds returns the list of values that were appended to the "spotifyIds" field in this mutation.
func (m *TrackMutation) AppendedSpotifyIds() ([]string, bool) {
	if len(m.appendspotifyIds) == 0 {
		return nil, false
	}
	return m.appendspotifyIds, true
}

// ResetSpotifyIds resets all changes to the "spotifyIds" field.
func (m *TrackMutation) ResetSpotifyIds() {
	m.spotifyIds = nil
	m.appendspotifyIds = nil
}

// SetName sets the "name" field.
func (m *TrackMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TrackMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TrackMutation) ResetName() {
	m.name = nil
}

// SetTrackNumber sets the "trackNumber" field.
func (m *TrackMutation) SetTrackNumber(i int) {
	m.trackNumber = &i
	m.addtrackNumber = nil
}

// TrackNumber returns the value of the "trackNumber" field in the mutation.
func (m *TrackMutation) TrackNumber() (r int, exists bool) {
	v := m.trackNumber
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackNumber returns the old "trackNumber" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldTrackNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrackNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrackNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackNumber: %w", err)
	}
	return oldValue.TrackNumber, nil
}

// AddTrackNumber adds i to the "trackNumber" field.
func (m *TrackMutation) AddTrackNumber(i int) {
	if m.addtrackNumber != nil {
		*m.addtrackNumber += i
	} else {
		m.addtrackNumber = &i
	}
}

// AddedTrackNumber returns the value that was added to the "trackNumber" field in this mutation.
func (m *TrackMutation) AddedTrackNumber() (r int, exists bool) {
	v := m.addtrackNumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrackNumber resets all changes to the "trackNumber" field.
func (m *TrackMutation) ResetTrackNumber() {
	m.trackNumber = nil
	m.addtrackNumber = nil
}

// SetSimplifiedName sets the "simplifiedName" field.
func (m *TrackMutation) SetSimplifiedName(s string) {
	m.simplifiedName = &s
}

// SimplifiedName returns the value of the "simplifiedName" field in the mutation.
func (m *TrackMutation) SimplifiedName() (r string, exists bool) {
	v := m.simplifiedName
	if v == nil {
		return
	}
	return *v, true
}

// OldSimplifiedName returns the old "simplifiedName" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldSimplifiedName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimplifiedName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimplifiedName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimplifiedName: %w", err)
	}
	return oldValue.SimplifiedName, nil
}

// ResetSimplifiedName resets all changes to the "simplifiedName" field.
func (m *TrackMutation) ResetSimplifiedName() {
	m.simplifiedName = nil
}

// AddSavedByIDs adds the "savedBy" edge to the User entity by ids.
func (m *TrackMutation) AddSavedByIDs(ids ...string) {
	if m.savedBy == nil {
		m.savedBy = make(map[string]struct{})
	}
	for i := range ids {
		m.savedBy[ids[i]] = struct{}{}
	}
}

// ClearSavedBy clears the "savedBy" edge to the User entity.
func (m *TrackMutation) ClearSavedBy() {
	m.clearedsavedBy = true
}

// SavedByCleared reports if the "savedBy" edge to the User entity was cleared.
func (m *TrackMutation) SavedByCleared() bool {
	return m.clearedsavedBy
}

// RemoveSavedByIDs removes the "savedBy" edge to the User entity by IDs.
func (m *TrackMutation) RemoveSavedByIDs(ids ...string) {
	if m.removedsavedBy == nil {
		m.removedsavedBy = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.savedBy, ids[i])
		m.removedsavedBy[ids[i]] = struct{}{}
	}
}

// RemovedSavedBy returns the removed IDs of the "savedBy" edge to the User entity.
func (m *TrackMutation) RemovedSavedByIDs() (ids []string) {
	for id := range m.removedsavedBy {
		ids = append(ids, id)
	}
	return
}

// SavedByIDs returns the "savedBy" edge IDs in the mutation.
func (m *TrackMutation) SavedByIDs() (ids []string) {
	for id := range m.savedBy {
		ids = append(ids, id)
	}
	return
}

// ResetSavedBy resets all changes to the "savedBy" edge.
func (m *TrackMutation) ResetSavedBy() {
	m.savedBy = nil
	m.clearedsavedBy = false
	m.removedsavedBy = nil
}

// SetAlbumID sets the "album" edge to the Album entity by id.
func (m *TrackMutation) SetAlbumID(id int) {
	m.album = &id
}

// ClearAlbum clears the "album" edge to the Album entity.
func (m *TrackMutation) ClearAlbum() {
	m.clearedalbum = true
}

// AlbumCleared reports if the "album" edge to the Album entity was cleared.
func (m *TrackMutation) AlbumCleared() bool {
	return m.clearedalbum
}

// AlbumID returns the "album" edge ID in the mutation.
func (m *TrackMutation) AlbumID() (id int, exists bool) {
	if m.album != nil {
		return *m.album, true
	}
	return
}

// AlbumIDs returns the "album" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AlbumID instead. It exists only for internal usage by the builders.
func (m *TrackMutation) AlbumIDs() (ids []int) {
	if id := m.album; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAlbum resets all changes to the "album" edge.
func (m *TrackMutation) ResetAlbum() {
	m.album = nil
	m.clearedalbum = false
}

// AddArtistIDs adds the "artists" edge to the Artist entity by ids.
func (m *TrackMutation) AddArtistIDs(ids ...int) {
	if m.artists == nil {
		m.artists = make(map[int]struct{})
	}
	for i := range ids {
		m.artists[ids[i]] = struct{}{}
	}
}

// ClearArtists clears the "artists" edge to the Artist entity.
func (m *TrackMutation) ClearArtists() {
	m.clearedartists = true
}

// ArtistsCleared reports if the "artists" edge to the Artist entity was cleared.
func (m *TrackMutation) ArtistsCleared() bool {
	return m.clearedartists
}

// RemoveArtistIDs removes the "artists" edge to the Artist entity by IDs.
func (m *TrackMutation) RemoveArtistIDs(ids ...int) {
	if m.removedartists == nil {
		m.removedartists = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.artists, ids[i])
		m.removedartists[ids[i]] = struct{}{}
	}
}

// RemovedArtists returns the removed IDs of the "artists" edge to the Artist entity.
func (m *TrackMutation) RemovedArtistsIDs() (ids []int) {
	for id := range m.removedartists {
		ids = append(ids, id)
	}
	return
}

// ArtistsIDs returns the "artists" edge IDs in the mutation.
func (m *TrackMutation) ArtistsIDs() (ids []int) {
	for id := range m.artists {
		ids = append(ids, id)
	}
	return
}

// ResetArtists resets all changes to the "artists" edge.
func (m *TrackMutation) ResetArtists() {
	m.artists = nil
	m.clearedartists = false
	m.removedartists = nil
}

// Where appends a list predicates to the TrackMutation builder.
func (m *TrackMutation) Where(ps ...predicate.Track) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrackMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrackMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Track, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrackMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrackMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Track).
func (m *TrackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrackMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.spotifyIds != nil {
		fields = append(fields, track.FieldSpotifyIds)
	}
	if m.name != nil {
		fields = append(fields, track.FieldName)
	}
	if m.trackNumber != nil {
		fields = append(fields, track.FieldTrackNumber)
	}
	if m.simplifiedName != nil {
		fields = append(fields, track.FieldSimplifiedName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case track.FieldSpotifyIds:
		return m.SpotifyIds()
	case track.FieldName:
		return m.Name()
	case track.FieldTrackNumber:
		return m.TrackNumber()
	case track.FieldSimplifiedName:
		return m.SimplifiedName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case track.FieldSpotifyIds:
		return m.OldSpotifyIds(ctx)
	case track.FieldName:
		return m.OldName(ctx)
	case track.FieldTrackNumber:
		return m.OldTrackNumber(ctx)
	case track.FieldSimplifiedName:
		return m.OldSimplifiedName(ctx)
	}
	return nil, fmt.Errorf("unknown Track field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case track.FieldSpotifyIds:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyIds(v)
		return nil
	case track.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case track.FieldTrackNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackNumber(v)
		return nil
	case track.FieldSimplifiedName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimplifiedName(v)
		return nil
	}
	return fmt.Errorf("unknown Track field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrackMutation) AddedFields() []string {
	var fields []string
	if m.addtrackNumber != nil {
		fields = append(fields, track.FieldTrackNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrackMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case track.FieldTrackNumber:
		return m.AddedTrackNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackMutation) AddField(name string, value ent.Value) error {
	switch name {
	case track.FieldTrackNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrackNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Track numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Track nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrackMutation) ResetField(name string) error {
	switch name {
	case track.FieldSpotifyIds:
		m.ResetSpotifyIds()
		return nil
	case track.FieldName:
		m.ResetName()
		return nil
	case track.FieldTrackNumber:
		m.ResetTrackNumber()
		return nil
	case track.FieldSimplifiedName:
		m.ResetSimplifiedName()
		return nil
	}
	return fmt.Errorf("unknown Track field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrackMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.savedBy != nil {
		edges = append(edges, track.EdgeSavedBy)
	}
	if m.album != nil {
		edges = append(edges, track.EdgeAlbum)
	}
	if m.artists != nil {
		edges = append(edges, track.EdgeArtists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case track.EdgeSavedBy:
		ids := make([]ent.Value, 0, len(m.savedBy))
		for id := range m.savedBy {
			ids = append(ids, id)
		}
		return ids
	case track.EdgeAlbum:
		if id := m.album; id != nil {
			return []ent.Value{*id}
		}
	case track.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.artists))
		for id := range m.artists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsavedBy != nil {
		edges = append(edges, track.EdgeSavedBy)
	}
	if m.removedartists != nil {
		edges = append(edges, track.EdgeArtists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrackMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case track.EdgeSavedBy:
		ids := make([]ent.Value, 0, len(m.removedsavedBy))
		for id := range m.removedsavedBy {
			ids = append(ids, id)
		}
		return ids
	case track.EdgeArtists:
		ids := make([]ent.Value, 0, len(m.removedartists))
		for id := range m.removedartists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsavedBy {
		edges = append(edges, track.EdgeSavedBy)
	}
	if m.clearedalbum {
		edges = append(edges, track.EdgeAlbum)
	}
	if m.clearedartists {
		edges = append(edges, track.EdgeArtists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrackMutation) EdgeCleared(name string) bool {
	switch name {
	case track.EdgeSavedBy:
		return m.clearedsavedBy
	case track.EdgeAlbum:
		return m.clearedalbum
	case track.EdgeArtists:
		return m.clearedartists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrackMutation) ClearEdge(name string) error {
	switch name {
	case track.EdgeAlbum:
		m.ClearAlbum()
		return nil
	}
	return fmt.Errorf("unknown Track unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrackMutation) ResetEdge(name string) error {
	switch name {
	case track.EdgeSavedBy:
		m.ResetSavedBy()
		return nil
	case track.EdgeAlbum:
		m.ResetAlbum()
		return nil
	case track.EdgeArtists:
		m.ResetArtists()
		return nil
	}
	return fmt.Errorf("unknown Track edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	spotifyToken       **oauth2.Token
	clearedFields      map[string]struct{}
	savedTracks        map[int]struct{}
	removedsavedTracks map[int]struct{}
	clearedsavedTracks bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSpotifyToken sets the "spotifyToken" field.
func (m *UserMutation) SetSpotifyToken(o *oauth2.Token) {
	m.spotifyToken = &o
}

// SpotifyToken returns the value of the "spotifyToken" field in the mutation.
func (m *UserMutation) SpotifyToken() (r *oauth2.Token, exists bool) {
	v := m.spotifyToken
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyToken returns the old "spotifyToken" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSpotifyToken(ctx context.Context) (v *oauth2.Token, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyToken: %w", err)
	}
	return oldValue.SpotifyToken, nil
}

// ResetSpotifyToken resets all changes to the "spotifyToken" field.
func (m *UserMutation) ResetSpotifyToken() {
	m.spotifyToken = nil
}

// AddSavedTrackIDs adds the "savedTracks" edge to the Track entity by ids.
func (m *UserMutation) AddSavedTrackIDs(ids ...int) {
	if m.savedTracks == nil {
		m.savedTracks = make(map[int]struct{})
	}
	for i := range ids {
		m.savedTracks[ids[i]] = struct{}{}
	}
}

// ClearSavedTracks clears the "savedTracks" edge to the Track entity.
func (m *UserMutation) ClearSavedTracks() {
	m.clearedsavedTracks = true
}

// SavedTracksCleared reports if the "savedTracks" edge to the Track entity was cleared.
func (m *UserMutation) SavedTracksCleared() bool {
	return m.clearedsavedTracks
}

// RemoveSavedTrackIDs removes the "savedTracks" edge to the Track entity by IDs.
func (m *UserMutation) RemoveSavedTrackIDs(ids ...int) {
	if m.removedsavedTracks == nil {
		m.removedsavedTracks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.savedTracks, ids[i])
		m.removedsavedTracks[ids[i]] = struct{}{}
	}
}

// RemovedSavedTracks returns the removed IDs of the "savedTracks" edge to the Track entity.
func (m *UserMutation) RemovedSavedTracksIDs() (ids []int) {
	for id := range m.removedsavedTracks {
		ids = append(ids, id)
	}
	return
}

// SavedTracksIDs returns the "savedTracks" edge IDs in the mutation.
func (m *UserMutation) SavedTracksIDs() (ids []int) {
	for id := range m.savedTracks {
		ids = append(ids, id)
	}
	return
}

// ResetSavedTracks resets all changes to the "savedTracks" edge.
func (m *UserMutation) ResetSavedTracks() {
	m.savedTracks = nil
	m.clearedsavedTracks = false
	m.removedsavedTracks = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.spotifyToken != nil {
		fields = append(fields, user.FieldSpotifyToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldSpotifyToken:
		return m.SpotifyToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldSpotifyToken:
		return m.OldSpotifyToken(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldSpotifyToken:
		v, ok := value.(*oauth2.Token)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyToken(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldSpotifyToken:
		m.ResetSpotifyToken()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.savedTracks != nil {
		edges = append(edges, user.EdgeSavedTracks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSavedTracks:
		ids := make([]ent.Value, 0, len(m.savedTracks))
		for id := range m.savedTracks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsavedTracks != nil {
		edges = append(edges, user.EdgeSavedTracks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSavedTracks:
		ids := make([]ent.Value, 0, len(m.removedsavedTracks))
		for id := range m.removedsavedTracks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsavedTracks {
		edges = append(edges, user.EdgeSavedTracks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSavedTracks:
		return m.clearedsavedTracks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSavedTracks:
		m.ResetSavedTracks()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
