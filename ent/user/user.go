// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSpotifyToken holds the string denoting the spotifytoken field in the database.
	FieldSpotifyToken = "spotify_token"
	// EdgeSavedTracks holds the string denoting the savedtracks edge name in mutations.
	EdgeSavedTracks = "savedTracks"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SavedTracksTable is the table that holds the savedTracks relation/edge. The primary key declared below.
	SavedTracksTable = "user_savedTracks"
	// SavedTracksInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	SavedTracksInverseTable = "tracks"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldSpotifyToken,
}

var (
	// SavedTracksPrimaryKey and SavedTracksColumn2 are the table columns denoting the
	// primary key for the savedTracks relation (M2M).
	SavedTracksPrimaryKey = []string{"user_id", "track_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySavedTracksCount orders the results by savedTracks count.
func BySavedTracksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSavedTracksStep(), opts...)
	}
}

// BySavedTracks orders the results by savedTracks terms.
func BySavedTracks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSavedTracksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSavedTracksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SavedTracksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SavedTracksTable, SavedTracksPrimaryKey...),
	)
}
