// Code generated by ent, DO NOT EDIT.

package playlist

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/m-nny/universe/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Playlist {
	return predicate.Playlist(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Playlist {
	return predicate.Playlist(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Playlist {
	return predicate.Playlist(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEQ(FieldName, v))
}

// SnaphotID applies equality check predicate on the "snaphot_id" field. It's identical to SnaphotIDEQ.
func SnaphotID(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEQ(FieldSnaphotID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Playlist {
	return predicate.Playlist(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Playlist {
	return predicate.Playlist(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldContainsFold(FieldName, v))
}

// SnaphotIDEQ applies the EQ predicate on the "snaphot_id" field.
func SnaphotIDEQ(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEQ(FieldSnaphotID, v))
}

// SnaphotIDNEQ applies the NEQ predicate on the "snaphot_id" field.
func SnaphotIDNEQ(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldNEQ(FieldSnaphotID, v))
}

// SnaphotIDIn applies the In predicate on the "snaphot_id" field.
func SnaphotIDIn(vs ...string) predicate.Playlist {
	return predicate.Playlist(sql.FieldIn(FieldSnaphotID, vs...))
}

// SnaphotIDNotIn applies the NotIn predicate on the "snaphot_id" field.
func SnaphotIDNotIn(vs ...string) predicate.Playlist {
	return predicate.Playlist(sql.FieldNotIn(FieldSnaphotID, vs...))
}

// SnaphotIDGT applies the GT predicate on the "snaphot_id" field.
func SnaphotIDGT(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldGT(FieldSnaphotID, v))
}

// SnaphotIDGTE applies the GTE predicate on the "snaphot_id" field.
func SnaphotIDGTE(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldGTE(FieldSnaphotID, v))
}

// SnaphotIDLT applies the LT predicate on the "snaphot_id" field.
func SnaphotIDLT(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldLT(FieldSnaphotID, v))
}

// SnaphotIDLTE applies the LTE predicate on the "snaphot_id" field.
func SnaphotIDLTE(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldLTE(FieldSnaphotID, v))
}

// SnaphotIDContains applies the Contains predicate on the "snaphot_id" field.
func SnaphotIDContains(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldContains(FieldSnaphotID, v))
}

// SnaphotIDHasPrefix applies the HasPrefix predicate on the "snaphot_id" field.
func SnaphotIDHasPrefix(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldHasPrefix(FieldSnaphotID, v))
}

// SnaphotIDHasSuffix applies the HasSuffix predicate on the "snaphot_id" field.
func SnaphotIDHasSuffix(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldHasSuffix(FieldSnaphotID, v))
}

// SnaphotIDEqualFold applies the EqualFold predicate on the "snaphot_id" field.
func SnaphotIDEqualFold(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldEqualFold(FieldSnaphotID, v))
}

// SnaphotIDContainsFold applies the ContainsFold predicate on the "snaphot_id" field.
func SnaphotIDContainsFold(v string) predicate.Playlist {
	return predicate.Playlist(sql.FieldContainsFold(FieldSnaphotID, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Playlist {
	return predicate.Playlist(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Playlist) predicate.Playlist {
	return predicate.Playlist(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Playlist) predicate.Playlist {
	return predicate.Playlist(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Playlist) predicate.Playlist {
	return predicate.Playlist(sql.NotPredicates(p))
}
