// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/m-nny/universe/ent/playlist"
	"github.com/m-nny/universe/ent/predicate"
	"github.com/m-nny/universe/ent/user"
)

// PlaylistUpdate is the builder for updating Playlist entities.
type PlaylistUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistMutation
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (pu *PlaylistUpdate) Where(ps ...predicate.Playlist) *PlaylistUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaylistUpdate) SetName(s string) *PlaylistUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableName(s *string) *PlaylistUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetSnaphotID sets the "snaphot_id" field.
func (pu *PlaylistUpdate) SetSnaphotID(s string) *PlaylistUpdate {
	pu.mutation.SetSnaphotID(s)
	return pu
}

// SetNillableSnaphotID sets the "snaphot_id" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableSnaphotID(s *string) *PlaylistUpdate {
	if s != nil {
		pu.SetSnaphotID(*s)
	}
	return pu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pu *PlaylistUpdate) SetOwnerID(id string) *PlaylistUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableOwnerID(id *string) *PlaylistUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *PlaylistUpdate) SetOwner(u *User) *PlaylistUpdate {
	return pu.SetOwnerID(u.ID)
}

// Mutation returns the PlaylistMutation object of the builder.
func (pu *PlaylistUpdate) Mutation() *PlaylistMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *PlaylistUpdate) ClearOwner() *PlaylistUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaylistUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaylistUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaylistUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaylistUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlaylistUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := playlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Playlist.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.SnaphotID(); ok {
		if err := playlist.SnaphotIDValidator(v); err != nil {
			return &ValidationError{Name: "snaphot_id", err: fmt.Errorf(`ent: validator failed for field "Playlist.snaphot_id": %w`, err)}
		}
	}
	return nil
}

func (pu *PlaylistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(playlist.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.SnaphotID(); ok {
		_spec.SetField(playlist.FieldSnaphotID, field.TypeString, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.OwnerTable,
			Columns: []string{playlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.OwnerTable,
			Columns: []string{playlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaylistUpdateOne is the builder for updating a single Playlist entity.
type PlaylistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistMutation
}

// SetName sets the "name" field.
func (puo *PlaylistUpdateOne) SetName(s string) *PlaylistUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableName(s *string) *PlaylistUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetSnaphotID sets the "snaphot_id" field.
func (puo *PlaylistUpdateOne) SetSnaphotID(s string) *PlaylistUpdateOne {
	puo.mutation.SetSnaphotID(s)
	return puo
}

// SetNillableSnaphotID sets the "snaphot_id" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableSnaphotID(s *string) *PlaylistUpdateOne {
	if s != nil {
		puo.SetSnaphotID(*s)
	}
	return puo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (puo *PlaylistUpdateOne) SetOwnerID(id string) *PlaylistUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableOwnerID(id *string) *PlaylistUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *PlaylistUpdateOne) SetOwner(u *User) *PlaylistUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// Mutation returns the PlaylistMutation object of the builder.
func (puo *PlaylistUpdateOne) Mutation() *PlaylistMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *PlaylistUpdateOne) ClearOwner() *PlaylistUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (puo *PlaylistUpdateOne) Where(ps ...predicate.Playlist) *PlaylistUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaylistUpdateOne) Select(field string, fields ...string) *PlaylistUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Playlist entity.
func (puo *PlaylistUpdateOne) Save(ctx context.Context) (*Playlist, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaylistUpdateOne) SaveX(ctx context.Context) *Playlist {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaylistUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaylistUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlaylistUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := playlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Playlist.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.SnaphotID(); ok {
		if err := playlist.SnaphotIDValidator(v); err != nil {
			return &ValidationError{Name: "snaphot_id", err: fmt.Errorf(`ent: validator failed for field "Playlist.snaphot_id": %w`, err)}
		}
	}
	return nil
}

func (puo *PlaylistUpdateOne) sqlSave(ctx context.Context) (_node *Playlist, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Playlist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlist.FieldID)
		for _, f := range fields {
			if !playlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(playlist.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.SnaphotID(); ok {
		_spec.SetField(playlist.FieldSnaphotID, field.TypeString, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.OwnerTable,
			Columns: []string{playlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.OwnerTable,
			Columns: []string{playlist.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Playlist{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
