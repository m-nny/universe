// Code generated by ent, DO NOT EDIT.

package track

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSpotifyIds holds the string denoting the spotifyids field in the database.
	FieldSpotifyIds = "spotify_ids"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTrackNumber holds the string denoting the tracknumber field in the database.
	FieldTrackNumber = "track_number"
	// FieldSimplifiedName holds the string denoting the simplifiedname field in the database.
	FieldSimplifiedName = "simplified_name"
	// EdgeSavedBy holds the string denoting the savedby edge name in mutations.
	EdgeSavedBy = "savedBy"
	// EdgeAlbum holds the string denoting the album edge name in mutations.
	EdgeAlbum = "album"
	// EdgeArtists holds the string denoting the artists edge name in mutations.
	EdgeArtists = "artists"
	// Table holds the table name of the track in the database.
	Table = "tracks"
	// SavedByTable is the table that holds the savedBy relation/edge. The primary key declared below.
	SavedByTable = "user_savedTracks"
	// SavedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SavedByInverseTable = "users"
	// AlbumTable is the table that holds the album relation/edge.
	AlbumTable = "tracks"
	// AlbumInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumInverseTable = "albums"
	// AlbumColumn is the table column denoting the album relation/edge.
	AlbumColumn = "album_tracks"
	// ArtistsTable is the table that holds the artists relation/edge. The primary key declared below.
	ArtistsTable = "artist_tracks"
	// ArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistsInverseTable = "artists"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldSpotifyIds,
	FieldName,
	FieldTrackNumber,
	FieldSimplifiedName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tracks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"album_tracks",
}

var (
	// SavedByPrimaryKey and SavedByColumn2 are the table columns denoting the
	// primary key for the savedBy relation (M2M).
	SavedByPrimaryKey = []string{"user_id", "track_id"}
	// ArtistsPrimaryKey and ArtistsColumn2 are the table columns denoting the
	// primary key for the artists relation (M2M).
	ArtistsPrimaryKey = []string{"artist_id", "track_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TrackNumberValidator is a validator for the "trackNumber" field. It is called by the builders before save.
	TrackNumberValidator func(int) error
	// SimplifiedNameValidator is a validator for the "simplifiedName" field. It is called by the builders before save.
	SimplifiedNameValidator func(string) error
)

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTrackNumber orders the results by the trackNumber field.
func ByTrackNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackNumber, opts...).ToFunc()
}

// BySimplifiedName orders the results by the simplifiedName field.
func BySimplifiedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimplifiedName, opts...).ToFunc()
}

// BySavedByCount orders the results by savedBy count.
func BySavedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSavedByStep(), opts...)
	}
}

// BySavedBy orders the results by savedBy terms.
func BySavedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSavedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAlbumField orders the results by album field.
func ByAlbumField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlbumStep(), sql.OrderByField(field, opts...))
	}
}

// ByArtistsCount orders the results by artists count.
func ByArtistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtistsStep(), opts...)
	}
}

// ByArtists orders the results by artists terms.
func ByArtists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSavedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SavedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SavedByTable, SavedByPrimaryKey...),
	)
}
func newAlbumStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlbumInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AlbumTable, AlbumColumn),
	)
}
func newArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ArtistsTable, ArtistsPrimaryKey...),
	)
}
