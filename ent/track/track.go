// Code generated by ent, DO NOT EDIT.

package track

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArtistNames holds the string denoting the artistnames field in the database.
	FieldArtistNames = "artist_names"
	// FieldArtistIds holds the string denoting the artistids field in the database.
	FieldArtistIds = "artist_ids"
	// EdgeSavedBy holds the string denoting the savedby edge name in mutations.
	EdgeSavedBy = "savedBy"
	// Table holds the table name of the track in the database.
	Table = "tracks"
	// SavedByTable is the table that holds the savedBy relation/edge. The primary key declared below.
	SavedByTable = "user_savedTracks"
	// SavedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SavedByInverseTable = "users"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldArtistNames,
	FieldArtistIds,
}

var (
	// SavedByPrimaryKey and SavedByColumn2 are the table columns denoting the
	// primary key for the savedBy relation (M2M).
	SavedByPrimaryKey = []string{"user_id", "track_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySavedByCount orders the results by savedBy count.
func BySavedByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSavedByStep(), opts...)
	}
}

// BySavedBy orders the results by savedBy terms.
func BySavedBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSavedByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSavedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SavedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SavedByTable, SavedByPrimaryKey...),
	)
}
