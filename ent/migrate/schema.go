// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AlbumsColumns holds the columns for the "albums" table.
	AlbumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "spotify_ids", Type: field.TypeJSON},
		{Name: "discogs_master_id", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "simplified_name", Type: field.TypeString},
	}
	// AlbumsTable holds the schema information for the "albums" table.
	AlbumsTable = &schema.Table{
		Name:       "albums",
		Columns:    AlbumsColumns,
		PrimaryKey: []*schema.Column{AlbumsColumns[0]},
	}
	// ArtistsColumns holds the columns for the "artists" table.
	ArtistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "spotify_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
	}
	// ArtistsTable holds the schema information for the "artists" table.
	ArtistsTable = &schema.Table{
		Name:       "artists",
		Columns:    ArtistsColumns,
		PrimaryKey: []*schema.Column{ArtistsColumns[0]},
	}
	// TracksColumns holds the columns for the "tracks" table.
	TracksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "spotify_ids", Type: field.TypeJSON},
		{Name: "name", Type: field.TypeString},
		{Name: "track_number", Type: field.TypeInt},
		{Name: "simplified_name", Type: field.TypeString},
		{Name: "album_tracks", Type: field.TypeInt, Nullable: true},
	}
	// TracksTable holds the schema information for the "tracks" table.
	TracksTable = &schema.Table{
		Name:       "tracks",
		Columns:    TracksColumns,
		PrimaryKey: []*schema.Column{TracksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tracks_albums_tracks",
				Columns:    []*schema.Column{TracksColumns[5]},
				RefColumns: []*schema.Column{AlbumsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "spotify_token", Type: field.TypeJSON, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ArtistTracksColumns holds the columns for the "artist_tracks" table.
	ArtistTracksColumns = []*schema.Column{
		{Name: "artist_id", Type: field.TypeInt},
		{Name: "track_id", Type: field.TypeInt},
	}
	// ArtistTracksTable holds the schema information for the "artist_tracks" table.
	ArtistTracksTable = &schema.Table{
		Name:       "artist_tracks",
		Columns:    ArtistTracksColumns,
		PrimaryKey: []*schema.Column{ArtistTracksColumns[0], ArtistTracksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "artist_tracks_artist_id",
				Columns:    []*schema.Column{ArtistTracksColumns[0]},
				RefColumns: []*schema.Column{ArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "artist_tracks_track_id",
				Columns:    []*schema.Column{ArtistTracksColumns[1]},
				RefColumns: []*schema.Column{TracksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ArtistAlbumsColumns holds the columns for the "artist_albums" table.
	ArtistAlbumsColumns = []*schema.Column{
		{Name: "artist_id", Type: field.TypeInt},
		{Name: "album_id", Type: field.TypeInt},
	}
	// ArtistAlbumsTable holds the schema information for the "artist_albums" table.
	ArtistAlbumsTable = &schema.Table{
		Name:       "artist_albums",
		Columns:    ArtistAlbumsColumns,
		PrimaryKey: []*schema.Column{ArtistAlbumsColumns[0], ArtistAlbumsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "artist_albums_artist_id",
				Columns:    []*schema.Column{ArtistAlbumsColumns[0]},
				RefColumns: []*schema.Column{ArtistsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "artist_albums_album_id",
				Columns:    []*schema.Column{ArtistAlbumsColumns[1]},
				RefColumns: []*schema.Column{AlbumsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserSavedTracksColumns holds the columns for the "user_savedTracks" table.
	UserSavedTracksColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "track_id", Type: field.TypeInt},
	}
	// UserSavedTracksTable holds the schema information for the "user_savedTracks" table.
	UserSavedTracksTable = &schema.Table{
		Name:       "user_savedTracks",
		Columns:    UserSavedTracksColumns,
		PrimaryKey: []*schema.Column{UserSavedTracksColumns[0], UserSavedTracksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_savedTracks_user_id",
				Columns:    []*schema.Column{UserSavedTracksColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_savedTracks_track_id",
				Columns:    []*schema.Column{UserSavedTracksColumns[1]},
				RefColumns: []*schema.Column{TracksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AlbumsTable,
		ArtistsTable,
		TracksTable,
		UsersTable,
		ArtistTracksTable,
		ArtistAlbumsTable,
		UserSavedTracksTable,
	}
)

func init() {
	TracksTable.ForeignKeys[0].RefTable = AlbumsTable
	ArtistTracksTable.ForeignKeys[0].RefTable = ArtistsTable
	ArtistTracksTable.ForeignKeys[1].RefTable = TracksTable
	ArtistAlbumsTable.ForeignKeys[0].RefTable = ArtistsTable
	ArtistAlbumsTable.ForeignKeys[1].RefTable = AlbumsTable
	UserSavedTracksTable.ForeignKeys[0].RefTable = UsersTable
	UserSavedTracksTable.ForeignKeys[1].RefTable = TracksTable
}
